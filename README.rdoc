
= CompTree

* http://comptree.rubyforge.org

== Summary

Automatic parallelism and lazy evaluation.

== Synopsis
  
  require 'comp_tree'
  
  CompTree.build do |driver|

    # Define a function named 'area' taking these two arguments.
    driver.define(:area, :width, :height) { |width, height|
      width*height
    }
    
    # Define a function 'width' which takes a 'border' argument.
    driver.define(:width, :border) { |border|
      7 + border
    }
    
    # Ditto for 'height'.
    driver.define(:height, :border) { |border|
      5 + border
    }
    
    # Define a constant function 'border'.
    driver.define(:border) {
      2
    }
    
    # Compute the area using four parallel threads.
    puts driver.compute(:area, :threads => 4)
    # => 63

    # We've done this computation.
    puts((7 + 2)*(5 + 2))
    # => 63
  end

== Install

  % gem install comp_tree

Or for the (non-gem) .tgz package,

  % ruby install.rb [--uninstall]

== Description

A computation tree for pure functional programming in Ruby.

The user should have a basic understanding of <em>functional
programming</em> (see for example
http://en.wikipedia.org/wiki/Functional_programming) and the meaning
of <em>side effects</em>.

Every function you define must explicitly depend on the data it uses.

  #
  # BAD example: depending on state -- offset not listed as a parameter
  #
  driver.define(:area, :width, :height) { |width, height|
    width*height - offset
  }

Unless <em>offset</em> is really a constant, the result of
<tt>driver.compute(:area, :threads => n)</tt> is not well-defined
for _n_ > 1.

Just as depending on some changeable state is bad, it is likewise bad
to affect a state (to produce a <em>side effect</em>).

  #
  # BAD example: affecting state
  #
  driver.define(:area, :width, :height) { |width, height|
    accumulator.add "more data"
    width*height
  }

Given a tree where nodes are modifying _accumulator_, the end state of
_accumulator_ is not well-defined.  Moreover if _accumulator_ is not
thread-safe, the result will be even worse.

Note however it is OK affect a state as long as <em>no other function
depends on that state</em>.  This is the principle under which
+comp_tree+ parallelizes Rake tasks (http://drake.rubyforge.org).

== Links

* Download: http://rubyforge.org/frs/?group_id=6917
* Rubyforge home: http://rubyforge.org/projects/comptree
* Repository: http://github.com/quix/comp_tree

== Author

* James M. Lawrence <quixoticsycophant@gmail.com>

== License
  
  Copyright (c) 2008 James M. Lawrence.  All rights reserved.
  
  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:
  
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

